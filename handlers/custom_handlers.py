from typing import List
from datetime import date
from telebot.types import Message

from loader import bot
from states.states import States
from config_data.config import DATE_FORMAT
from database.models import User, BotRequest
from handlers.function import check_registration, get_films
from keyboards import high_keyboard, low_keyboard, custom_keyboard


@bot.message_handler(state='*', commands=['high'])
def send_high(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /high –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–±–æ—Ä–æ–∫ —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.

    :param: message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :type: Message

    """

    if not check_registration(message=message):
        return
    bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏ –ø–æ–¥–±–æ—Ä–∫—É, '
                                      '–∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å! üëá',
                     reply_markup=high_keyboard.high_markup)
    bot.set_state(message.from_user.id, States.req_state, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as film_data:
        film_data['state'] = 'high_type'
        film_data['req_history'] = {'user_id': message.from_user.id}


@bot.message_handler(state='*', commands=['low'])
def send_low(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /low –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–±–æ—Ä–æ–∫ —Å –Ω–∏–∑–∫–∏–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º,
    —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –∏–ª–∏ —Å–∞–º—ã—Ö –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ–∏–ª—å–º–æ–≤.

    :param: message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :type: Message

    """

    if not check_registration(message=message):
        return
    bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏ –ø–æ–¥–±–æ—Ä–∫—É, '
                                      '–∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å! üëá',
                     reply_markup=low_keyboard.low_markup)
    bot.set_state(message.from_user.id, States.req_state, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as film_data:
        film_data['state'] = 'low_type'
        film_data['req_history'] = {'user_id': message.from_user.id}


@bot.message_handler(state='*', commands=['custom'])
def send_custom(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /custom –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–±–æ—Ä–æ–∫ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.

    :param: message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :type: Message

    """

    if not check_registration(message=message):
        return
    bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏ –ø–æ–¥–±–æ—Ä–∫—É, '
                                      '–∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å! üëá',
                     reply_markup=custom_keyboard.custom_markup)
    bot.set_state(message.from_user.id, States.value_range, message.chat.id)


@bot.message_handler(state="*", commands=['history'])
def get_history(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param: message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :type: Message

    """

    user_id = message.from_user.id
    user = User.get_or_none(User.user_id == user_id)
    if user is None:
        bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start")
        return
    history: List[BotRequest] = user.history.order_by(-BotRequest.req_date, -BotRequest.req_id).limit(10)

    result = []
    result.extend(map(str, reversed(history)))

    if not result:
        bot.send_message(message.from_user.id, "–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∑–∞–¥–∞—á")
        return

    bot.send_message(message.from_user.id, "\n".join(result))
    bot.set_state(message.from_user.id, States.base)


@bot.message_handler(state=States.value_range)
def input_range(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /custom

    :param: message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :type: Message

    """

    if message.text == custom_keyboard.item1.text:
        bot.reply_to(message, '–í–≤–µ–¥–∏ –≥–æ–¥ –≤—ã—Ö–æ–¥–∞ —Ñ–∏–ª—å–º–∞ (—Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: 2020) '
                              '–∏–ª–∏ –ø–µ—Ä–∏–æ–¥ (—Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: 1874-2050).')
    elif message.text == custom_keyboard.item2.text:
        bot.reply_to(message, '–í–≤–µ–¥–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–π—Ç–∏–Ω–≥ —Ñ–∏–ª—å–º–∞ (—Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: 7) '
                              '–∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω (—Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: 5-10)')
    else:
        bot.reply_to(message,
                     '–ù–µ –Ω—É–∂–Ω–æ —Å–∞–º–æ–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!üòÅ '
                     '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏ –ø–æ–¥–±–æ—Ä–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å! üëá')
        return
    bot.set_state(message.from_user.id, States.req_state, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as film_data:
        film_data['req_history'] = {'user_id': message.from_user.id}
        film_data['req_history']['command'] = message.text
        film_data['state'] = 'custom_type'


@bot.message_handler(state=States.req_state)
def req_state(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–±–æ—Ä–æ–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ (/high, /low, /custom)

    :param: message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :type: Message

    """

    with bot.retrieve_data(message.from_user.id, message.chat.id) as film_data:
        film_data['req_history']['req_date'] = date.today().strftime(DATE_FORMAT)
        film_data['sort_type'] = -1

        if film_data.get('state') != 'custom_type':
            if film_data.get('state') == 'high_type':
                film_data['markup'] = high_keyboard.high_markup_dict
            elif film_data.get('state') == 'low_type':
                film_data['sort_type'] = 1
                film_data['markup'] = low_keyboard.low_markup_dict

            if message.text not in film_data.get('markup'):
                bot.reply_to(message,
                             '–ù–µ –Ω—É–∂–Ω–æ —Å–∞–º–æ–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!üòÅ '
                             '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏ –ø–æ–¥–±–æ—Ä–∫—É, '
                             '–∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å! üëá')
                return
            film_data['req_history']['command'] = message.text
        else:
            film_data['req_history']['period'] = message.text
            film_data['markup'] = custom_keyboard.custom_markup_dict

        bot.reply_to(message, '–ò–∑ —Å–∫–æ–ª—å–∫–∏ —Ñ–∏–ª—å–º–æ–≤ —Ç—ã –±—É–¥–µ—à—å –≤—ã–±–∏—Ä–∞—Ç—å? '
                              '–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10')
        bot.set_state(message.from_user.id, States.count, message.chat.id)


@bot.message_handler(state=States.count)
def state_count(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.

    :param: message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :type: Message

    """

    check_text = message.text
    if check_text.isdigit() and 1 <= int(check_text) <= 10:
        film_limit = int(check_text)
    else:
        bot.reply_to(message, '–ü–æ—Ö–æ–∂–µ —Ç—ã –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ! –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10')
        return
    with bot.retrieve_data(message.from_user.id, message.chat.id) as film_data:
        film_data['req_history']['count'] = film_limit
        from_markup = film_data['req_history'].get('command')
        sort_type = film_data.get('sort_type')
        markup = film_data.get('markup')
        state = film_data.get('state')
        range_value = film_data['req_history'].get('period')
    new_database_entry = BotRequest(**film_data['req_history'])
    new_database_entry.save()
    get_films(message=message,
              sort_type=sort_type,
              limit=film_limit,
              sort_field=markup.get(from_markup),
              range_value=range_value)

    set_state = States.base
    if state == 'high_type':
        set_state = States.req_state
    elif state == 'low_type':
        set_state = States.req_state
    elif state == 'custom_type':
        set_state = States.value_range
    bot.set_state(message.from_user.id, set_state, message.chat.id)


@bot.message_handler(func=lambda message: True)
def other_message(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param: message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :type: Message

    """

    user_name = message.from_user.first_name
    bot.send_chat_action(chat_id=message.chat.id,
                         action='typing')
    bot.reply_to(message,
                 '{name}, –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É '
                 '/help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö.'.format(name=user_name))
